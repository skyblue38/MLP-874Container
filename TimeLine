#28-Jun-2022

1. Purchase Manning LP "Geting started with Kubernetes" https://www.manning.com/liveprojectseries/getting-started-with-kubernetes-ser
2. Create GitHUB repo https://github.com/skyblue38/MLP-874Container
3. Submit user "skyblue" to first Manning Live Project "Containerize and Application"
4. Receive invite to manning-lp/skyblue38-containerize-an-application-lp repository https://github.com/manning-lp/skyblue38-containerize-an-application-lp/invitations
5. go to https://github.com/manning-lp/skyblue38-containerize-an-application-lp
6. Rather than modify own Windows desktop... Build VirtualBOX Centos Stream 8 minimal VM (dHost01.local 192.168.0.81/24)
  a) Minimal with Docker instead of Podman
  b) add packages git, python36, npm and nodejs
7. Read about GIT (the Stupid Content Tracker) on dhost01.local -> file:///usr/share/doc/git/user-manual.html
8. Created a Personal Access Token as described in https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token
9. Ran "git clone https://github.com/manning-lp/skyblue38-containerize-an-application-lp" and got:
  Cloning into 'skyblue38-containerize-an-application-lp'...
  Username for 'https://github.com': skyblue
  Password for 'https://skyblue@github.com': ... (entered Token as password)
  remote: Enumerating objects: 120, done.
  remote: Counting objects: 100% (120/120), done.
  remote: Compressing objects: 100% (65/65), done.
  remote: Total 120 (delta 50), reused 120 (delta 50), pack-reused 0
  Receiving objects: 100% (120/120), 1.32 MiB | 5.82 MiB/s, done.
  Resolving deltas: 100% (50/50), done.
10. Ran "cd skyblue38-containerize-an-application-lp; npm install" and got:
  npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
  npm WARN shopping-cart@1.0.0 No repository field.
  added 68 packages from 93 contributors and audited 68 packages in 4.259s
  found 1 critical severity vulnerability
  run `npm audit fix` to fix them, or `npm audit` for details
11. Ran "npm audit" and got:
  === npm audit security report ===
  # Run  npm update ejs --depth 1  to resolve 1 vulnerability
  ┌───────────────┬──────────────────────────────────────────────────────────────┐
  │ Critical      │ Template injection in ejs                                    │
  ├───────────────┼──────────────────────────────────────────────────────────────┤
  │ Package       │ ejs                                                          │
  ├───────────────┼──────────────────────────────────────────────────────────────┤
  │ Dependency of │ ejs                                                          │
  ├───────────────┼──────────────────────────────────────────────────────────────┤
  │ Path          │ ejs                                                          │
  ├───────────────┼──────────────────────────────────────────────────────────────┤
  │ More info     │ https://github.com/advisories/GHSA-phwq-j96m-2c2q            │
  └───────────────┴──────────────────────────────────────────────────────────────┘
  found 1 critical severity vulnerability in 68 scanned packages
  run `npm audit fix` to fix 1 of them.
12. Ran "npm audit fix" and got:
  npm WARN shopping-cart@1.0.0 No repository field.
  + ejs@3.1.8
  added 2 packages from 2 contributors, removed 1 package and updated 14 packages in 4.004s
  2 packages are looking for funding
  run `npm fund` for details
  fixed 1 of 1 vulnerability in 68 scanned packages
13. Open VM firewall port 5000/tcp to allow access from home network (192.168.0.0/24) using: 
  sudo firtewall-cmd --add-port=5000/tcp --permanent; sudo firewall-cmd --reload
14. Checked firewall settings using "sudo firewall-cmd --list-all" and got:
  public (active)
  target: default
  icmp-block-inversion: no
  interfaces: enp0s3
  sources:
  services: cockpit dhcpv6-client ssh
  ports: 5000/tcp
  ...
15. Started the application using "node app.js" and got:
  BuildYourHome app listening on port 5000!
16. Open a browser on my Windows desktop and visit URL: http://192.168.0.81:5000 ... got BuildYourHome appl main page
  Then went to URL: http://192.168.0.81:5000/store and got shopping page
  Selected an item and added to cart
  Viewed Cart and entered payment details
  (used https://www.technetexperts.com/test-credit-card-number/ to get a credit card number)
  Payment failed with message 
  "You did not set a publishable key. Call Stripe.setPublishableKey().
  see https://stripe.com/docs/stripe.js"
17. Stopped the application by entereing Ctrl-C on console running "node app.js"
18. Checked that docker is available: Ran "docker version" and got:
  Client: Docker Engine - Community
    Version:           20.10.17
    API version:       1.41
    Go version:        go1.17.11
    Git commit:        100c701
    Built:             Mon Jun  6 23:03:11 2022
    OS/Arch:           linux/amd64
    Context:           default
    Experimental:      true
  Server: Docker Engine - Community
    Engine:
      Version:          20.10.17
      API version:      1.41 (minimum version 1.12)
      Go version:       go1.17.11
      Git commit:       a89b842
      Built:            Mon Jun  6 23:01:29 2022
      OS/Arch:          linux/amd64
      Experimental:     false
    containerd:
      Version:          1.6.6
      GitCommit:        10c12954828e7c7c9b6e0ea9b0c02b01407d3ae1
    runc:
      Version:          1.1.2
      GitCommit:        v1.1.2-0-ga916309
    docker-init:
      Version:          0.19.0
      GitCommit:        de40ad0
19. Read and interpreted resource chapter: 
  Learn Docker in a Month of Lunches by Elton Stoneman
  Chapter 3, section 2, “Writing your first Dockerfile”
  https://livebook.manning.com/book/learn-docker-in-a-month-of-lunches/chapter-3/point-14834-41-58-1
20: Created Dockerfile and .dockerignore as shown below:
  cd ~sysadmin/skyblue<TAB>
  cat <<EOF >Dockerfile
    FROM node:14-alpine
     WORKDIR /shoppingcart
     COPY app.js .
     COPY items.json .
     COPY node_modules/ .
     COPY public/ .
     COPY views/ .
     CMD ["node", "/shoppingcart/app.js"]
     EOF
   cat <<EOF >.dockerignore
     node_modules
     EOF
21. Built container using "docker build -t scart:1.0 ." and got:
  Sending build context to Docker daemon  2.057MB
  Step 1/7 : FROM node:14-alpine
  14-alpine: Pulling from library/node
  2408cc74d12b: Pull complete
  ee8b448b40d0: Pull complete
  75baac63bc00: Pull complete
  ebc461dbc49b: Pull complete
  Digest: sha256:6b87d16e4ce20cacd6f1f662f66c821e4c3c41c2903daeace52d818ec3f4bbdd
  Status: Downloaded newer image for node:14-alpine
    ---> 47afee183159
  Step 2/7 : WORKDIR shoppingcart
    ---> Running in 7fc9f1390d04
  Removing intermediate container 7fc9f1390d04
    ---> 4e5b00c5c6cb
  Step 3/7 : COPY app.js .
    ---> 5b2dddc2aa5a
  Step 4/7 : COPY items.json .
    ---> 406e2768b41c
  Step 5/7 : COPY public/ .
    ---> 39acf9a3dd81
  Step 6/7 : COPY views/ .
    ---> 3a818a67faf7
  Step 7/7 : CMD ["node", "/shoppingcart/apps.js"]
    ---> Running in f012c90fef7a
  Removing intermediate container f012c90fef7a
    ---> 1a1182dc9cfa
  Successfully built 1a1182dc9cfa
  Successfully tagged scart:1.0
20. Checked currently available Docker images using "docker images" and got:
  REPOSITORY     TAG         IMAGE ID       CREATED          SIZE
  scart          1.0         1a1182dc9cfa   13 minutes ago   120MB
  node           14-alpine   47afee183159   2 weeks ago      119MB
  kindest/node   <none>      32b8b755dee8   13 months ago    1.12GB
21. Tried running the container using "docker run -it --rm --init -p 5000:5000 scart:1.0"
  produced runtime error ??
  internal/modules/cjs/loader.js:905
    throw err;
  Error: Cannot find module 'dotenv'
  Require stack:
    - /shoppingcart/app.js
      at Function.Module._resolveFilename (internal/modules/cjs/loader.js:902:15)
      at Function.Module._load (internal/modules/cjs/loader.js:746:27)
      at Module.require (internal/modules/cjs/loader.js:974:19)
      at require (internal/modules/cjs/helpers.js:101:18)
      at Object.<anonymous> (/shoppingcart/app.js:3:5)
      at Module._compile (internal/modules/cjs/loader.js:1085:14)
      at Object.Module._extensions..js (internal/modules/cjs/loader.js:1114:10)
      at Module.load (internal/modules/cjs/loader.js:950:32)
      at Function.Module._load (internal/modules/cjs/loader.js:790:12)
      at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:75:12) {
    code: 'MODULE_NOT_FOUND',
    requireStack: [ '/shoppingcart/app.js' ]
    }
22. Revisiting resource chapters indicated that a two-stage docker file may be required...
  see: https://livebook.manning.com/book/learn-docker-in-a-month-of-lunches/chapter-4/62
  "Node.js is different--it uses JavaScript, which is an interpreted language, so there’s no compilation step. 
  Dockerized Node.js apps need the Node.js runtime and the source code in the application image."  
23. Create new Dockerfile with contents as shown below"
  FROM node:14-alpine AS builder
   WORKDIR /src
   COPY app.js .
   COPY items.json .
   COPY package-lock.json .
   COPY package.json .
   COPY public/ .
   COPY views/ .
   RUN npm install
   RUN npm audit fix

   FROM node:14-alpine
   WORKDIR /app
   COPY --from=builder /src/node_modules/ /app/node_modules/
   COPY app.js .
   COPY items.json .
   COPY package-lock.json .
   COPY package.json .
   COPY public/ .
   COPY views/ .
   EXPOSE 5000
   CMD ["node", "/app/app.js"]
24. Rebuilt using "docker build -t scart:1.0 ." and got:
  Sending build context to Docker daemon  2.058MB
  Step 1/21 : FROM node:14-alpine AS builder
    ---> 47afee183159
  Step 2/21 : WORKDIR /src
  ...
  Step 9/21 : RUN npm install
    ---> Running in 486705474ec0
  npm WARN shopping-cart@1.0.0 No description
  npm WARN shopping-cart@1.0.0 No repository field.
  added 69 packages from 93 contributors and audited 69 packages in 4.115s
  found 0 vulnerabilities
  Removing intermediate container 486705474ec0
    ---> 76117d50c698
  Step 10/21 : RUN npm audit fix
    ---> Running in d5cd8d184cb6
  npm WARN shopping-cart@1.0.0 No description
  npm WARN shopping-cart@1.0.0 No repository field.
  up to date in 1.124s
  fixed 0 of 0 vulnerabilities in 69 scanned packages
  Step 11/21 : FROM node:14-alpine
    ---> 47afee183159
  Step 12/21 : WORKDIR /app
    ---> Running in 5585505b1ca9
  Step 13/21 : COPY --from=builder /src/node_modules/ /app/node_modules/
    ---> 99120468c30c
  ...
  Step 21/21 : CMD ["node", "/app/app.js"]
    ---> Running in 3328dfd52370
  Removing intermediate container 3328dfd52370
    ---> 3f74d8ea1afa
  Successfully built 3f74d8ea1afa
  Successfully tagged scart:1.0
25. Checked currently available Docker images using "docker images" and got:
  REPOSITORY     TAG         IMAGE ID       CREATED         SIZE
  scart          1.0         3f74d8ea1afa   8 minutes ago   125MB
  ...
26. Test run docker image using "docker run -it --rm --init -p 5000:5000 scart:1.0" and got:
  BuildYourHome app listening on port 5000!
27. Open Firefox on Windows desktop and visited URL "http://192.168.0.81:5000/store" and got:
  Accessing store page...
  Error: Failed to lookup view "store.ejs" in views directory "/app/views"
    at Function.render (/app/node_modules/express/lib/application.js:580:17)
    at ServerResponse.render (/app/node_modules/express/lib/response.js:1012:7)
    at /app/app.js:31:17
    at FSReqCallback.readFileAfterClose [as oncomplete] (internal/fs/read_file_context.js:71:3)
28. Seems to be a directory hierarchy issue...

#29-Jun-2020

Restarted after glancing at hints and suggested solutions in MLP Resources

Dockerfile does not need to be 2-stage or so complex...
Created new image setup as follows:

1. Started dHost01.local VM in VirtualBOX (Server bridged to home intranet at 192.168.0.81/24)
2. Logged in as user "sysadmin" from the Windows desktop via putty
3. Created a directory:  mkdir shoppingcart
4. Coppied the scart application files into shoppingcart
  cp *.js shoppingcart; cp *.json shoppingcart; cp -r views shoppingcart; cp -r public shoppingcart
5. Createg .dockerignore using:
  cat <<EOF >shoppingcart/.dockerfile
  .git
  .cache
  node_modules
  **/.env
  **/.git
  **/.gitignore
  **/.project
  EOF
6. Created Dockerfile using:
  cat <<EOF >shoppingcart/Dockerfile
  FROM node:14-alpine
    WORKDIR /usr/src/app
    COPY package*.json ./
    RUN npm install
    RUN npm audit fix
    COPY . .
    EXPOSE 5000
    CMD ["node", "app.js"]
  EOF
  # Note that since port 5000/tcp is already allowed through VM firewall, 
  # and that the Application expects internal web traffic on port 5000, then
  # the container will continue to use port 5000 externally, to match the firewall settings
7. Built the container image using command "docker build -t scart:1.0 ."
  This time, no build errors. Very fast because everything was loaded from cache.
8. Verified the container image using "docker images"
  REPOSITORY     TAG         IMAGE ID       CREATED          SIZE
  scart          1.0         32cf57bd8af8   22 minutes ago   127MB
9. Ran the container using "docker run -it --rm --init -p 5000:5000 scart:1.0"
  no run-time errors. WORKDIR /usr/src/app seems to make it work OK :-)
10. Openned firefox in Windows desktop and browsed to URL "http://192.168.0.81:5000/store"
  Firefox displayed the application storefront correctly.


(to be continued)
